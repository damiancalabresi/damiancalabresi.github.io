---
layout: post
title: "Java UUID generator is not efficient!"
date: 2016-01-02 16:00:00
author: Damian Calabresi
categories: 
- blog 
- Java
img: 
thumb: 
comments: true
postid: 5
---

As the title said, the **java.util.UUID** generator is not very efficient, and could cause performance issues in some cases.

The UUID (universally unique identifier) is a global identifier. 
It is very useful if you are using a NoSQL database, because most of them does not have an atomic counter, sequence or autogenerated primary key.

If you use a random number generator, collisions can happen, specially if your application have thousands or millions of concurrent users. 
An UUID defines some criteria that guarantee the probability of a collision is lower than the probability of two asteroids falling in the head of the same person.

## Performance issues
In an application with many of users the default Java UUID generator could take more than 2 milliseconds to generate each identifier.
This time could be a problem in a high performance services that want request consuming less than 20ms. 
It's important to notice that in a concurrent application the delay could be worse, because the JDK use SecureRandom.

That's why I recommend to use a library called **Java Uuid Generator (JUG)**

<!--more-->

In this post a developer made a benchmark:

<http://www.cowtowncoder.com/blog/archives/2010/10/entry_429.html>

The results were these:

> Test 'JDK, random' - 974 msecs  
> Test 'JDK, name' - 230 msecs  
> Test 'Jug, SecureRandom' - 971 msecs  
> Test 'Jug, java.util.Random' - 33 msecs  
> Test 'Jug, time-based' - 39 msecs  
> Test 'Jug, name-based' - 256 msecs  

## Time based vs Random based
There are 4 versions of the UUID standard, the first version used the timestamp to avoid collisions. 
This solution has been deprecated because it is not "opaque", as Wikipedia says:

> *This scheme has been criticized in that it is not sufficiently "opaque"; it reveals both the identity of the computer that generated the UUID and the time at which it did so. Its uniqueness across computers is guaranteed as long as MAC addresses are not duplicated (which can happen, for instance, due to manual setting or “spoofing” of the MAC address); however, given the speed of modern processors, successive invocations on the same machine of a naive implementation of a generator of version 1 UUIDs may produce the same UUID, violating the uniqueness property.*

So, the most commonly used version is the forth. The forth version is only based in random numbers. 
If the random generator is secure, this version is which have less collision probabilities.

But, in this post I focus on performance, the time-based version is really faster than the random-based. 
Also, the library I'm talking about, doesn't have to problem of collisions in fast CPU's, it has an atomic counter to avoid it.
The remaining issue could be that the generated UUID show the MAC address of the machine an are predictable by an attacker.

In conclusion, if the generated cannot be seen by the user, use the time-based version.

## Java UUID Generator
This is the Github repo of the mentioned library:

<https://github.com/cowtowncoder/java-uuid-generator>

To import it in Maven, add this dependency:

{% highlight xml %}
<dependency>
  <groupId>com.fasterxml.uuid</groupId>
  <artifactId>java-uuid-generator</artifactId>
  <version>3.1.4</version>
</dependency>
{% endhighlight %}

The UUID generator is thread-safe, so the code will look like these:

{% highlight java %}
private static TimeBasedGenerator TB_GENERATOR = Generators.timeBasedGenerator(EthernetAddress.fromInterface());
private static RandomBasedGenerator RD_GENERATOR = Generators.randomBasedGenerator();

public static UUID getRandomBasedUUID() {
    return RD_GENERATOR.generate();
}

public static UUID getTimeBasedUUID() {
    return TB_GENERATOR.generate();
}
{% endhighlight %}

